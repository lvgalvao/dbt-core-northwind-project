{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Warehouse Moderno com dbt-core e PostgreSQL na AWS","text":"<p>Bem-vindo ao guia r\u00e1pido para construir um data warehouse moderno utilizando dbt-core e PostgreSQL na AWS! Este reposit\u00f3rio oferece uma vis\u00e3o detalhada sobre como configurar e utilizar essas ferramentas poderosas para transformar dados e gerar insights valiosos.</p>"},{"location":"#o-que-voce-encontrara-aqui","title":"O que voc\u00ea encontrar\u00e1 aqui","text":"<ul> <li>Guia R\u00e1pido: Passo a passo para come\u00e7ar a usar dbt-core e PostgreSQL na AWS.</li> <li>Refer\u00eancias: Documenta\u00e7\u00e3o sobre dbt-core e PostgreSQL para consultas r\u00e1pidas.</li> </ul>"},{"location":"#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de come\u00e7ar, certifique-se de que voc\u00ea j\u00e1 completou as seguintes etapas:</p> <ol> <li>Conta AWS Configurada:</li> <li> <p>Voc\u00ea deve ter uma conta na AWS configurada com as permiss\u00f5es necess\u00e1rias para criar e gerenciar inst\u00e2ncias RDS e outros recursos necess\u00e1rios.</p> </li> <li> <p>Inst\u00e2ncia RDS PostgreSQL Criada:</p> </li> <li> <p>Uma inst\u00e2ncia do PostgreSQL deve estar configurada e em execu\u00e7\u00e3o no Amazon RDS.</p> </li> <li> <p>Ambiente Python Configurado:</p> </li> <li>Certifique-se de ter Python 3.6 ou superior instalado no seu sistema.</li> <li> <p>O <code>dbt-core</code> deve estar instalado no seu ambiente. Se ainda n\u00e3o instalou, execute:</p> <p><code>sh  pip install dbt-postgres</code></p> </li> <li> <p>Banco de Dados Northwind Importado:</p> </li> <li>O banco de dados de demonstra\u00e7\u00e3o Northwind deve estar importado na sua inst\u00e2ncia do PostgreSQL.</li> </ol>"},{"location":"#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Para come\u00e7ar, siga o guia r\u00e1pido na se\u00e7\u00e3o Bem-vindo e aprenda a configurar seu ambiente de desenvolvimento.</p> <p>Aproveite o guia e sinta-se \u00e0 vontade para contribuir ou fazer perguntas na se\u00e7\u00e3o de coment\u00e1rios!</p>"},{"location":"#links-uteis","title":"Links \u00dateis","text":"<ul> <li>dbt-core</li> <li>PostgreSQL</li> <li>AWS RDS</li> </ul> <p>Feito por Luciano Vasconcelos.</p>"},{"location":"guides/bem_vindo/","title":"Bem-vindo","text":"<p>Bem-vindo ao guia r\u00e1pido para construir um data warehouse moderno utilizando dbt-core e PostgreSQL na AWS! Este reposit\u00f3rio oferece uma vis\u00e3o detalhada sobre como configurar e utilizar essas ferramentas poderosas para transformar dados e gerar insights valiosos.</p>"},{"location":"guides/bem_vindo/#por-que-dbt-core-em-2024","title":"Por que dbt-core em 2024?","text":"<p>O dbt-core (data build tool) \u00e9 uma das ferramentas mais populares e eficazes para transforma\u00e7\u00e3o de dados em 2024. Aqui est\u00e3o algumas raz\u00f5es pelas quais voc\u00ea deve considerar utilizar dbt-core como a espinha dorsal do seu data warehouse:</p>"},{"location":"guides/bem_vindo/#perspectivas-para-2024","title":"Perspectivas para 2024","text":"<ul> <li>Ado\u00e7\u00e3o Crescente: O dbt-core tem visto uma ado\u00e7\u00e3o crescente entre empresas de todos os tamanhos, desde startups at\u00e9 grandes corpora\u00e7\u00f5es. Isso se deve \u00e0 sua capacidade de simplificar e automatizar o processo de transforma\u00e7\u00e3o de dados.</li> <li>Comunidade Ativa: Com uma comunidade ativa e em crescimento, dbt-core est\u00e1 continuamente evoluindo. Novas funcionalidades e melhorias s\u00e3o introduzidas regularmente, baseadas no feedback da comunidade.</li> </ul>"},{"location":"guides/bem_vindo/#vantagens-do-dbt-core","title":"Vantagens do dbt-core","text":"<ol> <li> <p>Facilidade de Uso: dbt-core permite que analistas e engenheiros de dados escrevam transforma\u00e7\u00f5es de dados usando SQL simples, sem a necessidade de aprender uma nova linguagem de programa\u00e7\u00e3o. Isso reduz a curva de aprendizado e acelera o desenvolvimento.</p> </li> <li> <p>Transforma\u00e7\u00f5es Poderosas: Com dbt-core, voc\u00ea pode criar transforma\u00e7\u00f5es complexas de maneira modular e reutiliz\u00e1vel. Os modelos (models) do dbt permitem que voc\u00ea estruture seu pipeline de dados de forma clara e eficiente.</p> </li> <li> <p>Automatiza\u00e7\u00e3o e Orquestra\u00e7\u00e3o: dbt-core automatiza a execu\u00e7\u00e3o de transforma\u00e7\u00f5es de dados, garantindo que elas ocorram na ordem correta e de maneira consistente. Isso elimina a necessidade de scripts de ETL complexos e propensos a erros.</p> </li> <li> <p>Documenta\u00e7\u00e3o Integrada: dbt-core facilita a documenta\u00e7\u00e3o das transforma\u00e7\u00f5es de dados. Cada modelo pode ser documentado com descri\u00e7\u00f5es detalhadas, tornando mais f\u00e1cil para qualquer membro da equipe entender e manter o pipeline de dados.</p> </li> <li> <p>Qualidade e Confiabilidade dos Dados: Atrav\u00e9s de testes automatizados, dbt-core garante que as transforma\u00e7\u00f5es de dados atendam aos crit\u00e9rios de qualidade especificados. Isso ajuda a manter a integridade dos dados e a confian\u00e7a nos insights gerados.</p> </li> </ol>"},{"location":"guides/bem_vindo/#o-futuro-com-dbt-core","title":"O Futuro com dbt-core","text":"<p>\u00c0 medida que avan\u00e7amos em 2024, a demanda por solu\u00e7\u00f5es de dados eficientes e escal\u00e1veis continua a crescer. O dbt-core est\u00e1 bem posicionado para ser uma ferramenta essencial nessa jornada, proporcionando uma maneira moderna e eficaz de gerenciar e transformar dados.</p> <p>Esperamos que este guia ajude voc\u00ea a come\u00e7ar a usar dbt-core em seus projetos de data warehouse. Siga para as pr\u00f3ximas se\u00e7\u00f5es para configurar seu ambiente e come\u00e7ar a transformar seus dados com dbt-core e PostgreSQL na AWS!</p>"},{"location":"guides/guia_rapido/","title":"Configura\u00e7\u00e3o Inicial","text":""},{"location":"guides/guia_rapido/#guia-rapido-e-explicando-os-models-do-dbt-core","title":"Guia rapido e explicando os Models do dbt-core","text":"<p>No dbt-core, os models s\u00e3o o n\u00facleo do processo de transforma\u00e7\u00e3o de dados. Eles s\u00e3o arquivos SQL que definem como os dados devem ser transformados e estruturados dentro do seu data warehouse. Vamos entender melhor como os models funcionam e porque eles s\u00e3o t\u00e3o essenciais no dbt.</p>"},{"location":"guides/guia_rapido/#o-que-sao-models-no-dbt-core","title":"O Que S\u00e3o Models no dbt-core?","text":"<p>Os models no dbt-core s\u00e3o simplesmente consultas SQL armazenadas em arquivos. Cada model representa uma transforma\u00e7\u00e3o de dados que voc\u00ea deseja realizar. Esses models podem ser combinados e organizados para criar pipelines de dados complexos de forma eficiente e reutiliz\u00e1vel.</p>"},{"location":"guides/guia_rapido/#principais-funcionalidades-dos-models","title":"Principais Funcionalidades dos Models","text":"<ol> <li>Transforma\u00e7\u00f5es de Dados:</li> <li> <p>Modelos B\u00e1sicos: Esses s\u00e3o modelos simples que extraem dados diretamente de tabelas brutas no data warehouse. Eles podem ser usados para filtrar, limpar ou transformar dados iniciais.      <code>sql      -- models/orders.sql      select * from raw_orders_table</code></p> </li> <li> <p>Modelos Dependentes: Esses modelos dependem de outros models para obter seus dados. Eles utilizam a fun\u00e7\u00e3o <code>{{ ref('model_name') }}</code> para referenciar outros modelos, criando uma hierarquia de depend\u00eancias. Isso assegura que as transforma\u00e7\u00f5es sejam realizadas na ordem correta.      <code>sql      -- models/total_revenues_1997.sql      with ord as (          select order_id           from {{ ref('orders') }}          where extract(year from order_date) = 1997      )      select           sum(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) as total_revenues_1997      from           {{ ref('order_details') }}       inner join           ord       on           ord.order_id = order_details.order_id</code></p> </li> <li> <p>Materializa\u00e7\u00e3o dos Models:</p> </li> <li>O dbt-core permite definir como os models devem ser materializados no banco de dados. Voc\u00ea pode materializ\u00e1-los como tabelas (<code>table</code>), views (<code>view</code>), ou outras formas dependendo das suas necessidades de desempenho e armazenamento.      <code>yaml      models:        my_project:          orders:            materialized: table          order_details:            materialized: table          total_revenues_1997:            materialized: view</code></li> </ol>"},{"location":"guides/guia_rapido/#vantagens-dos-models-no-dbt-core","title":"Vantagens dos Models no dbt-core","text":"<ul> <li>Reutiliza\u00e7\u00e3o e Modularidade: Models podem ser facilmente reutilizados em diferentes partes do pipeline de dados. Isso permite que voc\u00ea construa transforma\u00e7\u00f5es complexas a partir de blocos menores e mais simples.</li> <li>Gest\u00e3o de Depend\u00eancias: Com a fun\u00e7\u00e3o <code>{{ ref('model_name') }}</code>, dbt-core gerencia automaticamente a ordem de execu\u00e7\u00e3o dos models, garantindo que todas as depend\u00eancias sejam resolvidas corretamente.</li> <li>Facilidade de Manuten\u00e7\u00e3o: Como os models s\u00e3o escritos em SQL, uma linguagem amplamente conhecida e utilizada, a manuten\u00e7\u00e3o e atualiza\u00e7\u00e3o das transforma\u00e7\u00f5es de dados tornam-se mais simples e acess\u00edveis a uma ampla gama de profissionais de dados.</li> </ul>"},{"location":"guides/guia_rapido/#exemplo-pratico","title":"Exemplo Pr\u00e1tico","text":"<p>Vamos considerar um exemplo pr\u00e1tico de como os models s\u00e3o utilizados no dbt-core para transformar dados do banco de dados de demonstra\u00e7\u00e3o Northwind.</p> <ul> <li> <p>Modelo B\u00e1sico:   <code>sql   -- models/orders.sql   select * from raw_orders_table</code></p> </li> <li> <p>Modelo Dependente:   <code>sql   -- models/total_revenues_1997.sql   with ord as (       select order_id        from {{ ref('orders') }}       where extract(year from order_date) = 1997   )   select        sum(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) as total_revenues_1997   from        {{ ref('order_details') }}    inner join        ord    on        ord.order_id = order_details.order_id</code></p> </li> </ul>"},{"location":"guides/guia_rapido/#executando-os-models","title":"Executando os Models","text":"<p>Para compilar e executar os models, utilizamos o comando <code>dbt run</code>:</p> <pre><code>dbt run\n</code></pre> <p>Isso cria as tabelas e views definidas no data warehouse, transformando os dados brutos em dados prontos para an\u00e1lise.</p> <p>Os models no dbt-core s\u00e3o essenciais para qualquer pipeline de dados moderno, proporcionando uma forma clara, reutiliz\u00e1vel e eficiente de transformar e organizar dados. Esperamos que esta explica\u00e7\u00e3o ajude voc\u00ea a entender melhor como utilizar os models no dbt-core para maximizar o valor dos seus dados.</p>"},{"location":"reference/models/","title":"Models","text":""},{"location":"reference/models/#teoria-sobre-os-models-no-dbt-core","title":"Teoria sobre os Models no dbt-core","text":"<p>Os models no dbt-core s\u00e3o a base sobre a qual a transforma\u00e7\u00e3o de dados \u00e9 constru\u00edda. Eles s\u00e3o arquivos SQL que definem as transforma\u00e7\u00f5es que os dados brutos precisam passar para se tornarem dados prontos para an\u00e1lise. Vamos explorar a teoria por tr\u00e1s dos models no dbt-core, baseada na documenta\u00e7\u00e3o oficial.</p>"},{"location":"reference/models/#o-que-sao-models","title":"O Que S\u00e3o Models?","text":"<p>No dbt-core, um model \u00e9 uma consulta SQL salva como um arquivo <code>.sql</code> dentro do diret\u00f3rio <code>models</code> do seu projeto dbt. Quando voc\u00ea executa <code>dbt run</code>, cada model \u00e9 convertido em uma tabela ou view no seu data warehouse. Models permitem que voc\u00ea escreva c\u00f3digo SQL modular e reutiliz\u00e1vel para transformar seus dados de forma eficiente e organizada.</p>"},{"location":"reference/models/#estrutura-e-funcionalidade","title":"Estrutura e Funcionalidade","text":"<p>Os models s\u00e3o criados como arquivos SQL que cont\u00eam instru\u00e7\u00f5es <code>SELECT</code>. Cada model representa uma transforma\u00e7\u00e3o espec\u00edfica dos dados. Aqui est\u00e3o os componentes chave:</p> <ol> <li>Modelos B\u00e1sicos:</li> <li> <p>Estes s\u00e3o os modelos mais simples, que normalmente representam uma \u00fanica tabela ou view de dados brutos. Eles podem ser usados para limpar e filtrar os dados.    <code>sql    -- models/basic_model.sql    select *    from raw_table    where column is not null</code></p> </li> <li> <p>Modelos Derivados:</p> </li> <li>Estes modelos dependem de outros models para seus dados de entrada. Utilizando a fun\u00e7\u00e3o <code>{{ ref('model_name') }}</code>, dbt garante que as depend\u00eancias entre modelos sejam gerenciadas corretamente.    <code>sql    -- models/derived_model.sql    select *    from {{ ref('basic_model') }}    where another_column &gt; 10</code></li> </ol>"},{"location":"reference/models/#materializacao-dos-models","title":"Materializa\u00e7\u00e3o dos Models","text":"<p>No dbt-core, voc\u00ea pode definir como deseja que cada model seja materializado no data warehouse. As op\u00e7\u00f5es de materializa\u00e7\u00e3o incluem:</p> <ul> <li> <p>View: Cria uma view no data warehouse. \u00datil quando voc\u00ea deseja sempre ter dados atualizados, mas sem duplicar dados.   <code>yaml   models:     my_project:       view_model:         materialized: view</code></p> </li> <li> <p>Table: Cria uma tabela f\u00edsica no data warehouse. \u00datil para melhorar o desempenho de consultas complexas.   <code>yaml   models:     my_project:       table_model:         materialized: table</code></p> </li> <li> <p>Incremental: Permite a atualiza\u00e7\u00e3o incremental dos dados. \u00datil para grandes conjuntos de dados onde a carga completa seria ineficiente.   <code>yaml   models:     my_project:       incremental_model:         materialized: incremental         unique_key: id</code></p> </li> </ul>"},{"location":"reference/models/#referencias-ref","title":"Refer\u00eancias (<code>ref</code>)","text":"<p>A fun\u00e7\u00e3o <code>{{ ref('model_name') }}</code> \u00e9 usada para criar depend\u00eancias entre models. Ela informa ao dbt que um model depende de outro, garantindo que os models sejam executados na ordem correta. Isso tamb\u00e9m facilita a manuten\u00e7\u00e3o e o entendimento do fluxo de dados.</p>"},{"location":"reference/models/#exemplos-de-uso","title":"Exemplos de Uso","text":"<p>Aqui est\u00e3o alguns exemplos de como models podem ser utilizados no dbt-core:</p> <ul> <li> <p>Modelos de Limpeza de Dados:   <code>sql   -- models/cleaned_data.sql   select     id,     trim(name) as name,     cast(price as decimal) as price   from     {{ ref('raw_data') }}   where     name is not null</code></p> </li> <li> <p>Modelos de Agrega\u00e7\u00e3o de Dados:   <code>sql   -- models/aggregated_data.sql   select     category,     sum(price) as total_price   from     {{ ref('cleaned_data') }}   group by     category</code></p> </li> </ul>"},{"location":"reference/models/#vantagens-dos-models-no-dbt-core","title":"Vantagens dos Models no dbt-core","text":"<ul> <li>Modularidade: Models permitem que voc\u00ea divida transforma\u00e7\u00f5es complexas em partes menores e mais gerenci\u00e1veis.</li> <li>Reutiliza\u00e7\u00e3o: Models podem ser reutilizados em diferentes partes do seu projeto, evitando duplica\u00e7\u00e3o de c\u00f3digo.</li> <li>Clareza: A estrutura clara e a utiliza\u00e7\u00e3o de refer\u00eancias (<code>ref</code>) tornam o pipeline de dados f\u00e1cil de entender e manter.</li> <li>Desempenho: A materializa\u00e7\u00e3o como tabelas pode melhorar o desempenho de consultas complexas, enquanto views garantem dados sempre atualizados.</li> </ul>"},{"location":"reference/models/#executando-models","title":"Executando Models","text":"<p>Para executar os models e aplicar as transforma\u00e7\u00f5es de dados, voc\u00ea utiliza o comando <code>dbt run</code>. Este comando compila os models e executa as consultas SQL no seu data warehouse, criando ou atualizando as tabelas e views conforme definido.</p> <pre><code>dbt run\n</code></pre> <p>Os models no dbt-core s\u00e3o fundamentais para construir pipelines de dados robustos e eficientes. Eles oferecem uma maneira estruturada e modular de transformar dados brutos em dados prontos para an\u00e1lise, aproveitando ao m\u00e1ximo as capacidades do seu data warehouse.</p>"},{"location":"reference/projeto/","title":"Projeto","text":""},{"location":"reference/projeto/#estrutura-da-pasta-referencia","title":"Estrutura da Pasta Refer\u00eancia","text":"<p>A estrutura da pasta <code>reference</code> deve ser organizada dentro do diret\u00f3rio <code>docs</code> do seu projeto. Aqui est\u00e1 como deve ser a estrutura de diret\u00f3rios:</p> <pre><code>my_mkdocs_project/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 guides/\n\u2502   \u2502   \u251c\u2500\u2500 welcome.md\n\u2502   \u2502   \u251c\u2500\u2500 initial_setup.md\n\u2502   \u2502   \u2514\u2500\u2500 first_steps.md\n\u2502   \u251c\u2500\u2500 reference/\n\u2502   \u2502   \u251c\u2500\u2500 dbt_core.md\n\u2502   \u2502   \u2514\u2500\u2500 postgresql.md\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u251c\u2500\u2500 logo.png\n\u2502   \u2502   \u2514\u2500\u2500 favicon.ico\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"reference/projeto/#conteudo-da-pagina-dbt_coremd","title":"Conte\u00fado da P\u00e1gina <code>dbt_core.md</code>","text":"<p>Crie um arquivo chamado <code>dbt_core.md</code> dentro da pasta <code>reference</code> e adicione o seguinte conte\u00fado:</p> <pre><code># dbt-core\n\nO dbt-core (data build tool) \u00e9 uma ferramenta poderosa para transformar dados dentro do seu data warehouse. Ele permite que analistas de dados e engenheiros de dados escrevam transforma\u00e7\u00f5es de dados usando SQL simples, enquanto o dbt se encarrega de transformar essas instru\u00e7\u00f5es em tabelas e views no data warehouse.\n\n## Principais Benef\u00edcios\n\n1. **Facilidade de Uso**: Com dbt-core, voc\u00ea pode transformar dados escrevendo apenas instru\u00e7\u00f5es `SELECT`. N\u00e3o \u00e9 necess\u00e1rio aprender uma nova linguagem de programa\u00e7\u00e3o; voc\u00ea pode usar SQL, que j\u00e1 conhece.\n\n2. **Documenta\u00e7\u00e3o e Testes**: dbt-core facilita a documenta\u00e7\u00e3o das transforma\u00e7\u00f5es de dados e permite adicionar testes automatizados para garantir a qualidade dos dados. Isso ajuda a manter um pipeline de dados confi\u00e1vel e bem documentado.\n\n3. **Gest\u00e3o de Depend\u00eancias**: O dbt-core torna f\u00e1cil gerenciar depend\u00eancias entre modelos de dados. Usando a fun\u00e7\u00e3o `{{ ref('model_name') }}`, voc\u00ea pode criar relacionamentos claros entre diferentes modelos, assegurando que as transforma\u00e7\u00f5es sejam executadas na ordem correta.\n\n## Como Usamos dbt-core neste Projeto\n\nNeste projeto, usamos o dbt-core para transformar e agregar dados do banco de dados de demonstra\u00e7\u00e3o Northwind. Abaixo est\u00e3o alguns exemplos de como configuramos e utilizamos dbt-core:\n\n### Exemplo de Modelo B\u00e1sico\n\n```sql\n-- models/orders.sql\nselect * from raw_orders_table\n</code></pre>"},{"location":"reference/projeto/#exemplo-de-modelo-com-dependencia","title":"Exemplo de Modelo com Depend\u00eancia","text":"<pre><code>-- models/total_revenues_1997.sql\nwith ord as (\n    select order_id \n    from {{ ref('orders') }}\n    where extract(year from order_date) = 1997\n)\nselect \n    sum(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) as total_revenues_1997\nfrom \n    {{ ref('order_details') }} \ninner join \n    ord \non \n    ord.order_id = order_details.order_id\n</code></pre>"},{"location":"reference/projeto/#configuracao-do-dbt","title":"Configura\u00e7\u00e3o do dbt","text":"<p>A configura\u00e7\u00e3o do dbt \u00e9 feita no arquivo <code>dbt_project.yml</code>, onde definimos os detalhes do projeto, como as conex\u00f5es com o banco de dados e os caminhos dos modelos:</p> <pre><code># dbt_project.yml\n\nname: 'northwind_project'\nversion: '1.0.0'\nconfig-version: 2\n\n# Conex\u00e3o com o banco de dados\nprofile: 'northwind_project'\n\n# Configura\u00e7\u00f5es dos modelos\nmodels:\n  northwind:\n    orders:\n      materialized: table\n    order_details:\n      materialized: table\n    total_revenues_1997:\n      materialized: view\n</code></pre>"},{"location":"reference/projeto/#executando-o-dbt","title":"Executando o dbt","text":"<p>Para compilar e executar os modelos, usamos o comando <code>dbt run</code>:</p> <pre><code>dbt run\n</code></pre> <p>Isso cria as tabelas e views definidas no data warehouse, transformando os dados brutos em dados prontos para an\u00e1lise.</p>"},{"location":"reference/projeto/#recursos-adicionais","title":"Recursos Adicionais","text":"<ul> <li>Documenta\u00e7\u00e3o Oficial do dbt-core</li> <li>Reposit\u00f3rio do dbt no GitHub</li> </ul> <p>Esperamos que este guia ajude voc\u00ea a come\u00e7ar a usar dbt-core em seus projetos de data warehouse!</p>"}]}