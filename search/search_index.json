{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bem-vindo","text":"<p>Ol\u00e1, boas-vindas ao bootcamp de Data warehouse com dbt-core e PostgreSQL na AWS!</p> <p>A nossa inten\u00e7\u00e3o neste curso \u00e9 facilitar o aprendizado sobre como construir um data warehouse eficiente utilizando dbt-core. Vamos explorar como integrar o dbt-core com o PostgreSQL, criar transforma\u00e7\u00f5es de dados, e gerar insights valiosos. </p> <p></p> <p>Tudo isso para oferecer uma boa base para quem quer trabalhar com essa tecnologia. A nossa forma de apresentar o curso \u00e9 pr\u00e1tica e cheia de informa\u00e7\u00f5es, buscando trazer o que voc\u00ea precisa para criar os seus pr\u00f3prios projetos.</p> <p></p>"},{"location":"#datas-das-aulas","title":"Datas das Aulas","text":"<p>As datas das aulas s\u00edncronas (ao vivo e com a turma) j\u00e1 est\u00e3o dispon\u00edveis na comunidade da jornada de dados .</p>"},{"location":"#o-que-e-dbt","title":"O que \u00e9 dbt?","text":"<p>dbt \u00e9 um fluxo de trabalho de transforma\u00e7\u00e3o focado em SQL que permite que as equipes implantem c\u00f3digo de an\u00e1lise de forma r\u00e1pida e colaborativa, seguindo as melhores pr\u00e1ticas de engenharia de software, como modularidade, portabilidade, CI/CD e documenta\u00e7\u00e3o. Agora, qualquer membro da equipe de dados pode contribuir de forma segura para pipelines de dados em n\u00edvel de produ\u00e7\u00e3o.</p>"},{"location":"#sobre-o-bootcamp","title":"Sobre o Bootcamp","text":"<p>Este bootcamp foi desenvolvido para oferecer uma experi\u00eancia pr\u00e1tica no uso do dbt-core, ele \u00e9 a conclus\u00e3o do bootcamp de Python para engenheiros e analytics engineer que possui 20 m\u00f3dulos.</p> <p>Meu objetivo \u00e9 que voc\u00ea obtenha uma compreens\u00e3o das funcionalidades do dbt-core e das boas pr\u00e1ticas associadas a ele. Que seja capaz de migrar um projeto utilizando comandos DDL e DML para os modelos do dbt</p> <p>O projeto central do curso ser\u00e1 a constru\u00e7\u00e3o de um data warehouse baseado no banco de dados de demonstra\u00e7\u00e3o Northwind. Esse projeto incluir\u00e1 a implementa\u00e7\u00e3o de transforma\u00e7\u00f5es de dados, agrega\u00e7\u00f5es e a cria\u00e7\u00e3o de relat\u00f3rios.</p> <p>Para a constru\u00e7\u00e3o do projeto, ser\u00e3o utilizadas as vers\u00f5es mais recentes das ferramentas, dispon\u00edveis em 2024, como dbt-core e PostgreSQL.</p> <p>Al\u00e9m da constru\u00e7\u00e3o do projeto, o curso tamb\u00e9m incluir\u00e1 a pr\u00e1tica de automa\u00e7\u00e3o e execu\u00e7\u00e3o de transforma\u00e7\u00f5es, utilizando o airflow. Essa abordagem garante que as transforma\u00e7\u00f5es de dados sejam n\u00e3o apenas funcionais, mas tamb\u00e9m robustas e confi\u00e1veis.</p>"},{"location":"#o-que-voce-vai-aprender","title":"O que voc\u00ea vai aprender?","text":"<p>Aqui est\u00e1 uma vis\u00e3o geral dos t\u00f3picos que abordaremos neste curso:</p> <ul> <li>Configurando um Ambiente de Desenvolvimento para dbt-core: come\u00e7aremos do absoluto zero, criando e configurando nosso ambiente de desenvolvimento.</li> <li>Primeiros Passos com dbt-core: ap\u00f3s configurar o ambiente, mergulharemos na estrutura b\u00e1sica de um projeto dbt-core e faremos uma introdu\u00e7\u00e3o detalhada \u00e0s transforma\u00e7\u00f5es de dados.</li> <li>Modelagem de Dados com dbt-core: aprenderemos a criar e manipular modelos de dados, utilizando o dbt-core para transformar e organizar os dados.</li> <li>Integra\u00e7\u00e3o com PostgreSQL na AWS: construiremos uma integra\u00e7\u00e3o completa com o PostgreSQL na AWS, para garantir que nossos dados sejam armazenados e processados de maneira eficiente.</li> <li>Automatizando e Executando Transforma\u00e7\u00f5es de Dados: faremos uma introdu\u00e7\u00e3o detalhada \u00e0 automa\u00e7\u00e3o de transforma\u00e7\u00f5es de dados, garantindo que nossos pipelines de dados sejam robustos e eficientes.</li> </ul>"},{"location":"#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Para aproveitar ao m\u00e1ximo este curso, \u00e9 recomendado que voc\u00ea j\u00e1 tenha assistido at\u00e9 a aula 05 do bootcamp de SQL.</p> <ul> <li>Saber criar uma consulta usando CTE (Common Table Expressions);</li> <li>Saber criar tabelas e views;</li> <li>Entender joins (INNER JOIN, LEFT JOIN, etc.) e como combin\u00e1-los para obter dados de m\u00faltiplas tabelas;</li> <li>Conhecimento de agrega\u00e7\u00f5es e fun\u00e7\u00f5es de janela (window functions) para realizar c\u00e1lculos complexos sobre conjuntos de dados.</li> </ul>"},{"location":"guides/bem_vindo/","title":"Bem-vindo","text":"<p>Bem-vindo ao guia r\u00e1pido para construir um data warehouse moderno utilizando dbt-core e PostgreSQL na AWS! Este reposit\u00f3rio oferece uma vis\u00e3o detalhada sobre como configurar e utilizar essas ferramentas poderosas para transformar dados e gerar insights valiosos.</p>"},{"location":"guides/bem_vindo/#por-que-dbt-core-em-2024","title":"Por que dbt-core em 2024?","text":"<p>O dbt-core (data build tool) \u00e9 uma das ferramentas mais populares e eficazes para transforma\u00e7\u00e3o de dados em 2024. Aqui est\u00e3o algumas raz\u00f5es pelas quais voc\u00ea deve considerar utilizar dbt-core como a espinha dorsal do seu data warehouse:</p>"},{"location":"guides/bem_vindo/#perspectivas-para-2024","title":"Perspectivas para 2024","text":"<ul> <li>Ado\u00e7\u00e3o Crescente: O dbt-core tem visto uma ado\u00e7\u00e3o crescente entre empresas de todos os tamanhos, desde startups at\u00e9 grandes corpora\u00e7\u00f5es. Isso se deve \u00e0 sua capacidade de simplificar e automatizar o processo de transforma\u00e7\u00e3o de dados.</li> <li>Comunidade Ativa: Com uma comunidade ativa e em crescimento, dbt-core est\u00e1 continuamente evoluindo. Novas funcionalidades e melhorias s\u00e3o introduzidas regularmente, baseadas no feedback da comunidade.</li> </ul>"},{"location":"guides/bem_vindo/#vantagens-do-dbt-core","title":"Vantagens do dbt-core","text":"<ol> <li> <p>Facilidade de Uso: dbt-core permite que analistas e engenheiros de dados escrevam transforma\u00e7\u00f5es de dados usando SQL simples, sem a necessidade de aprender uma nova linguagem de programa\u00e7\u00e3o. Isso reduz a curva de aprendizado e acelera o desenvolvimento.</p> </li> <li> <p>Transforma\u00e7\u00f5es Poderosas: Com dbt-core, voc\u00ea pode criar transforma\u00e7\u00f5es complexas de maneira modular e reutiliz\u00e1vel. Os modelos (models) do dbt permitem que voc\u00ea estruture seu pipeline de dados de forma clara e eficiente.</p> </li> <li> <p>Automatiza\u00e7\u00e3o e Orquestra\u00e7\u00e3o: dbt-core automatiza a execu\u00e7\u00e3o de transforma\u00e7\u00f5es de dados, garantindo que elas ocorram na ordem correta e de maneira consistente. Isso elimina a necessidade de scripts de ETL complexos e propensos a erros.</p> </li> <li> <p>Documenta\u00e7\u00e3o Integrada: dbt-core facilita a documenta\u00e7\u00e3o das transforma\u00e7\u00f5es de dados. Cada modelo pode ser documentado com descri\u00e7\u00f5es detalhadas, tornando mais f\u00e1cil para qualquer membro da equipe entender e manter o pipeline de dados.</p> </li> <li> <p>Qualidade e Confiabilidade dos Dados: Atrav\u00e9s de testes automatizados, dbt-core garante que as transforma\u00e7\u00f5es de dados atendam aos crit\u00e9rios de qualidade especificados. Isso ajuda a manter a integridade dos dados e a confian\u00e7a nos insights gerados.</p> </li> </ol>"},{"location":"guides/bem_vindo/#o-futuro-com-dbt-core","title":"O Futuro com dbt-core","text":"<p>\u00c0 medida que avan\u00e7amos em 2024, a demanda por solu\u00e7\u00f5es de dados eficientes e escal\u00e1veis continua a crescer. O dbt-core est\u00e1 bem posicionado para ser uma ferramenta essencial nessa jornada, proporcionando uma maneira moderna e eficaz de gerenciar e transformar dados.</p> <p>Esperamos que este guia ajude voc\u00ea a come\u00e7ar a usar dbt-core em seus projetos de data warehouse. Siga para as pr\u00f3ximas se\u00e7\u00f5es para configurar seu ambiente e come\u00e7ar a transformar seus dados com dbt-core e PostgreSQL na AWS!</p>"},{"location":"guides/guia_rapido/","title":"Configura\u00e7\u00e3o Inicial","text":""},{"location":"guides/guia_rapido/#guia-rapido-e-explicando-os-models-do-dbt-core","title":"Guia rapido e explicando os Models do dbt-core","text":"<p>No dbt-core, os models s\u00e3o o n\u00facleo do processo de transforma\u00e7\u00e3o de dados. Eles s\u00e3o arquivos SQL que definem como os dados devem ser transformados e estruturados dentro do seu data warehouse. Vamos entender melhor como os models funcionam e porque eles s\u00e3o t\u00e3o essenciais no dbt.</p>"},{"location":"guides/guia_rapido/#o-que-sao-models-no-dbt-core","title":"O Que S\u00e3o Models no dbt-core?","text":"<p>Os models no dbt-core s\u00e3o simplesmente consultas SQL armazenadas em arquivos. Cada model representa uma transforma\u00e7\u00e3o de dados que voc\u00ea deseja realizar. Esses models podem ser combinados e organizados para criar pipelines de dados complexos de forma eficiente e reutiliz\u00e1vel.</p>"},{"location":"guides/guia_rapido/#principais-funcionalidades-dos-models","title":"Principais Funcionalidades dos Models","text":"<ol> <li>Transforma\u00e7\u00f5es de Dados:</li> <li> <p>Modelos B\u00e1sicos: Esses s\u00e3o modelos simples que extraem dados diretamente de tabelas brutas no data warehouse. Eles podem ser usados para filtrar, limpar ou transformar dados iniciais.      <code>sql      -- models/orders.sql      select * from raw_orders_table</code></p> </li> <li> <p>Modelos Dependentes: Esses modelos dependem de outros models para obter seus dados. Eles utilizam a fun\u00e7\u00e3o <code>{{ ref('model_name') }}</code> para referenciar outros modelos, criando uma hierarquia de depend\u00eancias. Isso assegura que as transforma\u00e7\u00f5es sejam realizadas na ordem correta.      <code>sql      -- models/total_revenues_1997.sql      with ord as (          select order_id           from {{ ref('orders') }}          where extract(year from order_date) = 1997      )      select           sum(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) as total_revenues_1997      from           {{ ref('order_details') }}       inner join           ord       on           ord.order_id = order_details.order_id</code></p> </li> <li> <p>Materializa\u00e7\u00e3o dos Models:</p> </li> <li>O dbt-core permite definir como os models devem ser materializados no banco de dados. Voc\u00ea pode materializ\u00e1-los como tabelas (<code>table</code>), views (<code>view</code>), ou outras formas dependendo das suas necessidades de desempenho e armazenamento.      <code>yaml      models:        my_project:          orders:            materialized: table          order_details:            materialized: table          total_revenues_1997:            materialized: view</code></li> </ol>"},{"location":"guides/guia_rapido/#vantagens-dos-models-no-dbt-core","title":"Vantagens dos Models no dbt-core","text":"<ul> <li>Reutiliza\u00e7\u00e3o e Modularidade: Models podem ser facilmente reutilizados em diferentes partes do pipeline de dados. Isso permite que voc\u00ea construa transforma\u00e7\u00f5es complexas a partir de blocos menores e mais simples.</li> <li>Gest\u00e3o de Depend\u00eancias: Com a fun\u00e7\u00e3o <code>{{ ref('model_name') }}</code>, dbt-core gerencia automaticamente a ordem de execu\u00e7\u00e3o dos models, garantindo que todas as depend\u00eancias sejam resolvidas corretamente.</li> <li>Facilidade de Manuten\u00e7\u00e3o: Como os models s\u00e3o escritos em SQL, uma linguagem amplamente conhecida e utilizada, a manuten\u00e7\u00e3o e atualiza\u00e7\u00e3o das transforma\u00e7\u00f5es de dados tornam-se mais simples e acess\u00edveis a uma ampla gama de profissionais de dados.</li> </ul>"},{"location":"guides/guia_rapido/#exemplo-pratico","title":"Exemplo Pr\u00e1tico","text":"<p>Vamos considerar um exemplo pr\u00e1tico de como os models s\u00e3o utilizados no dbt-core para transformar dados do banco de dados de demonstra\u00e7\u00e3o Northwind.</p> <ul> <li> <p>Modelo B\u00e1sico:   <code>sql   -- models/orders.sql   select * from raw_orders_table</code></p> </li> <li> <p>Modelo Dependente:   <code>sql   -- models/total_revenues_1997.sql   with ord as (       select order_id        from {{ ref('orders') }}       where extract(year from order_date) = 1997   )   select        sum(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) as total_revenues_1997   from        {{ ref('order_details') }}    inner join        ord    on        ord.order_id = order_details.order_id</code></p> </li> </ul>"},{"location":"guides/guia_rapido/#executando-os-models","title":"Executando os Models","text":"<p>Para compilar e executar os models, utilizamos o comando <code>dbt run</code>:</p> <pre><code>dbt run\n</code></pre> <p>Isso cria as tabelas e views definidas no data warehouse, transformando os dados brutos em dados prontos para an\u00e1lise.</p> <p>Os models no dbt-core s\u00e3o essenciais para qualquer pipeline de dados moderno, proporcionando uma forma clara, reutiliz\u00e1vel e eficiente de transformar e organizar dados. Esperamos que esta explica\u00e7\u00e3o ajude voc\u00ea a entender melhor como utilizar os models no dbt-core para maximizar o valor dos seus dados.</p>"},{"location":"guides/testes/","title":"Configura\u00e7\u00e3o Testes","text":"<p>Para visualizar e executar os testes no dbt, voc\u00ea pode seguir alguns passos e utilizar as ferramentas que o dbt oferece para garantir que suas transforma\u00e7\u00f5es de dados est\u00e3o funcionando conforme o esperado. Aqui est\u00e3o as etapas para configurar, executar e visualizar os testes no dbt:</p>"},{"location":"guides/testes/#configurando-testes-no-dbt","title":"Configurando Testes no dbt","text":"<ol> <li>Adicionar Testes Simples:</li> <li>Voc\u00ea pode adicionar testes simples diretamente nos arquivos de configura\u00e7\u00e3o do modelo (YAML). Testes comuns incluem verifica\u00e7\u00f5es de valores nulos, unicidade e integridade referencial.</li> </ol>"},{"location":"guides/testes/#exemplo-de-arquivo-yaml-com-testes","title":"Exemplo de Arquivo YAML com Testes","text":"<p>Crie um arquivo chamado <code>schema.yml</code> no mesmo diret\u00f3rio do seu modelo e defina os testes.</p> <pre><code>version: 2\n\nmodels:\n  - name: stg_customers\n    description: \"Tabela de clientes do est\u00e1gio\"\n    columns:\n      - name: customer_id\n        description: \"ID \u00fanico do cliente\"\n        tests:\n          - not_null\n          - unique\n      - name: company_name\n        description: \"Nome da empresa\"\n        tests:\n          - not_null\n\n  - name: stg_orders\n    description: \"Tabela de pedidos do est\u00e1gio\"\n    columns:\n      - name: order_id\n        description: \"ID \u00fanico do pedido\"\n        tests:\n          - not_null\n          - unique\n      - name: customer_id\n        description: \"ID do cliente que fez o pedido\"\n        tests:\n          - not_null\n          - relationships:\n              to: ref('stg_customers')\n              field: customer_id\n</code></pre>"},{"location":"guides/testes/#executando-testes-no-dbt","title":"Executando Testes no dbt","text":"<ol> <li>Executar Todos os Testes:</li> <li>Para executar todos os testes definidos nos seus arquivos <code>schema.yml</code>, voc\u00ea pode usar o comando <code>tests</code>.</li> </ol> <pre><code>dbt tests\n</code></pre> <ol> <li>Visualizar os Resultados dos Testes:</li> <li>Ap\u00f3s a execu\u00e7\u00e3o, o dbt fornecer\u00e1 um resumo dos testes que passaram e falharam. Para detalhes mais granulares, voc\u00ea pode verificar os logs gerados pelo dbt.</li> </ol>"},{"location":"guides/testes/#visualizando-testes-no-dbt","title":"Visualizando Testes no dbt","text":"<ol> <li>Utilizar dbt Docs:</li> <li>O dbt oferece uma ferramenta poderosa para documentar e visualizar seu projeto, incluindo os resultados dos testes. Voc\u00ea pode gerar a documenta\u00e7\u00e3o e servir um site local para explorar os detalhes.</li> </ol>"},{"location":"guides/testes/#gerar-documentacao","title":"Gerar Documenta\u00e7\u00e3o","text":"<pre><code>dbt docs generate\n</code></pre>"},{"location":"guides/testes/#servir-a-documentacao","title":"Servir a Documenta\u00e7\u00e3o","text":"<pre><code>dbt docs serve\n</code></pre> <ul> <li>Acesse a URL fornecida (geralmente http://localhost:8080) para visualizar a documenta\u00e7\u00e3o e explorar os testes configurados.</li> </ul>"},{"location":"guides/testes/#exemplo-completo","title":"Exemplo Completo","text":"<p>Vamos considerar um exemplo onde temos os modelos <code>stg_customers</code> e <code>stg_orders</code> com os testes configurados.</p>"},{"location":"guides/testes/#arquivo-stg_customerssql","title":"Arquivo <code>stg_customers.sql</code>","text":"<pre><code>-- models/staging/stg_customers.sql\n\nselect\n    customer_id,\n    company_name,\n    contact_name,\n    contact_title,\n    address,\n    city,\n    region,\n    postal_code,\n    country,\n    phone,\n    fax\nfrom\n    {{ ref('raw_customers') }}\n</code></pre>"},{"location":"guides/testes/#arquivo-stg_orderssql","title":"Arquivo <code>stg_orders.sql</code>","text":"<pre><code>-- models/staging/stg_orders.sql\n\nselect\n    order_id,\n    customer_id,\n    employee_id,\n    order_date,\n    required_date,\n    shipped_date,\n    ship_via,\n    freight,\n    ship_name,\n    ship_address,\n    ship_city,\n    ship_region,\n    ship_postal_code,\n    ship_country\nfrom\n    {{ ref('raw_orders') }}\n</code></pre>"},{"location":"guides/testes/#arquivo-schemayml","title":"Arquivo <code>schema.yml</code>","text":"<pre><code>version: 2\n\nmodels:\n  - name: stg_customers\n    description: \"Tabela de clientes do est\u00e1gio\"\n    columns:\n      - name: customer_id\n        description: \"ID \u00fanico do cliente\"\n        tests:\n          - not_null\n          - unique\n      - name: company_name\n        description: \"Nome da empresa\"\n        tests:\n          - not_null\n\n  - name: stg_orders\n    description: \"Tabela de pedidos do est\u00e1gio\"\n    columns:\n      - name: order_id\n        description: \"ID \u00fanico do pedido\"\n        tests:\n          - not_null\n          - unique\n      - name: customer_id\n        description: \"ID do cliente que fez o pedido\"\n        tests:\n          - not_null\n          - relationships:\n              to: ref('stg_customers')\n              field: customer_id\n</code></pre>"},{"location":"guides/testes/#resumo","title":"Resumo","text":"<p>Para ver e garantir a qualidade dos dados em seu projeto dbt, voc\u00ea pode: 1. Adicionar testes nos arquivos YAML. 2. Executar os testes usando o comando <code>dbt test</code>. 3. Visualizar os resultados dos testes na linha de comando ou usando o dbt Docs para uma visualiza\u00e7\u00e3o mais detalhada.</p> <p>Seguindo esses passos, voc\u00ea poder\u00e1 garantir que suas transforma\u00e7\u00f5es de dados est\u00e3o corretas e os dados mant\u00eam a integridade necess\u00e1ria.</p>"},{"location":"guides/testes/#tipagem","title":"Tipagem","text":"<p>Para checar a tipagem de todas as colunas em seus modelos dbt, voc\u00ea pode usar o teste de esquemas no dbt que permite definir e verificar tipos de dados esperados. Voc\u00ea pode especificar o tipo de dados esperado para cada coluna em seu arquivo <code>schema.yml</code>. A seguir, mostrarei como fazer isso.</p>"},{"location":"guides/testes/#passos-para-verificar-tipagem-das-colunas","title":"Passos para Verificar Tipagem das Colunas","text":"<ol> <li>Definir Tipagem das Colunas no Arquivo <code>schema.yml</code>:</li> <li>No arquivo <code>schema.yml</code>, al\u00e9m de definir testes como <code>not_null</code> e <code>unique</code>, voc\u00ea pode usar o teste <code>dbt_utils.type_string</code> para verificar a tipagem das colunas.</li> </ol>"},{"location":"guides/testes/#exemplo-de-schemayml-com-verificacao-de-tipagem","title":"Exemplo de <code>schema.yml</code> com Verifica\u00e7\u00e3o de Tipagem","text":""},{"location":"guides/testes/#schemayml-no-diretorio-staging","title":"<code>schema.yml</code> no Diret\u00f3rio <code>staging</code>","text":"<pre><code>version: 2\n\nmodels:\n  - name: stg_customers\n    description: \"Tabela de clientes do est\u00e1gio\"\n    columns:\n      - name: customer_id\n        description: \"ID \u00fanico do cliente\"\n        tests:\n          - not_null\n          - unique\n          - dbt_utils.type_string:\n              type: int\n      - name: company_name\n        description: \"Nome da empresa\"\n        tests:\n          - not_null\n          - dbt_utils.type_string:\n              type: varchar\n      - name: contact_name\n        description: \"Nome do contato\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: contact_title\n        description: \"T\u00edtulo do contato\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: address\n        description: \"Endere\u00e7o\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: city\n        description: \"Cidade\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: region\n        description: \"Regi\u00e3o\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: postal_code\n        description: \"C\u00f3digo Postal\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: country\n        description: \"Pa\u00eds\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: phone\n        description: \"Telefone\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: fax\n        description: \"Fax\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n\n  - name: stg_orders\n    description: \"Tabela de pedidos do est\u00e1gio\"\n    columns:\n      - name: order_id\n        description: \"ID \u00fanico do pedido\"\n        tests:\n          - not_null\n          - unique\n          - dbt_utils.type_string:\n              type: int\n      - name: customer_id\n        description: \"ID do cliente que fez o pedido\"\n        tests:\n          - not_null\n          - dbt_utils.type_string:\n              type: int\n      - name: order_date\n        description: \"Data do pedido\"\n        tests:\n          - dbt_utils.type_string:\n              type: date\n      - name: required_date\n        description: \"Data necess\u00e1ria\"\n        tests:\n          - dbt_utils.type_string:\n              type: date\n      - name: shipped_date\n        description: \"Data de envio\"\n        tests:\n          - dbt_utils.type_string:\n              type: date\n      - name: ship_via\n        description: \"Transportadora\"\n        tests:\n          - dbt_utils.type_string:\n              type: int\n      - name: freight\n        description: \"Frete\"\n        tests:\n          - dbt_utils.type_string:\n              type: float\n      - name: ship_name\n        description: \"Nome da entrega\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: ship_address\n        description: \"Endere\u00e7o da entrega\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: ship_city\n        description: \"Cidade da entrega\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: ship_region\n        description: \"Regi\u00e3o da entrega\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: ship_postal_code\n        description: \"C\u00f3digo Postal da entrega\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n      - name: ship_country\n        description: \"Pa\u00eds da entrega\"\n        tests:\n          - dbt_utils.type_string:\n              type: varchar\n\n  - name: stg_order_details\n    description: \"Tabela de detalhes dos pedidos\"\n    columns:\n      - name: order_id\n        description: \"ID do pedido\"\n        tests:\n          - not_null\n          - dbt_utils.type_string:\n              type: int\n      - name: product_id\n        description: \"ID do produto\"\n        tests:\n          - not_null\n          - dbt_utils.type_string:\n              type: int\n      - name: unit_price\n        description: \"Pre\u00e7o unit\u00e1rio\"\n        tests:\n          - not_null\n          - dbt_utils.type_string:\n              type: float\n      - name: quantity\n        description: \"Quantidade\"\n        tests:\n          - not_null\n          - dbt_utils.type_string:\n              type: int\n      - name: discount\n        description: \"Desconto\"\n        tests:\n          - dbt_utils.type_string:\n              type: float\n</code></pre>"},{"location":"guides/testes/#usar-o-dbt-utils-para-testar-tipagem","title":"Usar o dbt-utils para Testar Tipagem","text":"<p>O pacote <code>dbt-utils</code> fornece uma variedade de testes adicionais, incluindo o teste de tipagem. Para us\u00e1-lo, voc\u00ea precisa adicion\u00e1-lo ao seu projeto dbt.</p>"},{"location":"guides/testes/#adicionar-dbt-utils-ao-projeto","title":"Adicionar <code>dbt-utils</code> ao Projeto","text":"<ol> <li>Atualizar o <code>packages.yml</code>:</li> </ol> <pre><code>packages:\n  - package: dbt-labs/dbt_utils\n    version: 0.8.6\n</code></pre> <ol> <li>Instalar o Pacote:</li> </ol> <pre><code>dbt deps\n</code></pre>"},{"location":"guides/testes/#executar-os-testes","title":"Executar os Testes","text":"<ol> <li>Executar Todos os Testes:</li> </ol> <pre><code>dbt test\n</code></pre> <ol> <li>Gerar e Servir a Documenta\u00e7\u00e3o:</li> </ol> <pre><code>dbt docs generate\ndbt docs serve\n</code></pre> <p>Acesse a URL fornecida (geralmente http://localhost:8080) para explorar os resultados dos testes e a documenta\u00e7\u00e3o.</p>"},{"location":"guides/testes/#conclusao","title":"Conclus\u00e3o","text":"<p>Seguindo esses passos, voc\u00ea pode configurar, executar e visualizar os testes de tipagem de colunas em seu projeto dbt, garantindo que todas as colunas tenham os tipos de dados esperados. Isso ajuda a manter a integridade e a consist\u00eancia dos dados em todo o seu pipeline de dados.</p>"},{"location":"reference/models/","title":"dbt models","text":""},{"location":"reference/models/#teoria-sobre-os-models-no-dbt-core","title":"Teoria sobre os Models no dbt-core","text":"<p>Os models no dbt-core s\u00e3o a base sobre a qual a transforma\u00e7\u00e3o de dados \u00e9 constru\u00edda. Eles s\u00e3o arquivos SQL que definem as transforma\u00e7\u00f5es que os dados brutos precisam passar para se tornarem dados prontos para an\u00e1lise. Vamos explorar a teoria por tr\u00e1s dos models no dbt-core, baseada na documenta\u00e7\u00e3o oficial.</p>"},{"location":"reference/models/#o-que-sao-models","title":"O Que S\u00e3o Models?","text":"<p>No dbt-core, um model \u00e9 uma consulta SQL salva como um arquivo <code>.sql</code> dentro do diret\u00f3rio <code>models</code> do seu projeto dbt. Quando voc\u00ea executa <code>dbt run</code>, cada model \u00e9 convertido em uma tabela ou view no seu data warehouse. Models permitem que voc\u00ea escreva c\u00f3digo SQL modular e reutiliz\u00e1vel para transformar seus dados de forma eficiente e organizada.</p>"},{"location":"reference/models/#estrutura-e-funcionalidade","title":"Estrutura e Funcionalidade","text":"<p>Os models s\u00e3o criados como arquivos SQL que cont\u00eam instru\u00e7\u00f5es <code>SELECT</code>. Cada model representa uma transforma\u00e7\u00e3o espec\u00edfica dos dados. Aqui est\u00e3o os componentes chave:</p> <ol> <li>Modelos B\u00e1sicos:</li> <li> <p>Estes s\u00e3o os modelos mais simples, que normalmente representam uma \u00fanica tabela ou view de dados brutos. Eles podem ser usados para limpar e filtrar os dados.    <code>sql    -- models/basic_model.sql    select *    from raw_table    where column is not null</code></p> </li> <li> <p>Modelos Derivados:</p> </li> <li>Estes modelos dependem de outros models para seus dados de entrada. Utilizando a fun\u00e7\u00e3o <code>{{ ref('model_name') }}</code>, dbt garante que as depend\u00eancias entre modelos sejam gerenciadas corretamente.    <code>sql    -- models/derived_model.sql    select *    from {{ ref('basic_model') }}    where another_column &gt; 10</code></li> </ol>"},{"location":"reference/models/#materializacao-dos-models","title":"Materializa\u00e7\u00e3o dos Models","text":"<p>No dbt-core, voc\u00ea pode definir como deseja que cada model seja materializado no data warehouse. As op\u00e7\u00f5es de materializa\u00e7\u00e3o incluem:</p> <ul> <li> <p>View: Cria uma view no data warehouse. \u00datil quando voc\u00ea deseja sempre ter dados atualizados, mas sem duplicar dados.   <code>yaml   models:     my_project:       view_model:         materialized: view</code></p> </li> <li> <p>Table: Cria uma tabela f\u00edsica no data warehouse. \u00datil para melhorar o desempenho de consultas complexas.   <code>yaml   models:     my_project:       table_model:         materialized: table</code></p> </li> <li> <p>Incremental: Permite a atualiza\u00e7\u00e3o incremental dos dados. \u00datil para grandes conjuntos de dados onde a carga completa seria ineficiente.   <code>yaml   models:     my_project:       incremental_model:         materialized: incremental         unique_key: id</code></p> </li> </ul>"},{"location":"reference/models/#referencias-ref","title":"Refer\u00eancias (<code>ref</code>)","text":"<p>A fun\u00e7\u00e3o <code>{{ ref('model_name') }}</code> \u00e9 usada para criar depend\u00eancias entre models. Ela informa ao dbt que um model depende de outro, garantindo que os models sejam executados na ordem correta. Isso tamb\u00e9m facilita a manuten\u00e7\u00e3o e o entendimento do fluxo de dados.</p>"},{"location":"reference/models/#exemplos-de-uso","title":"Exemplos de Uso","text":"<p>Aqui est\u00e3o alguns exemplos de como models podem ser utilizados no dbt-core:</p> <ul> <li> <p>Modelos de Limpeza de Dados:   <code>sql   -- models/cleaned_data.sql   select     id,     trim(name) as name,     cast(price as decimal) as price   from     {{ ref('raw_data') }}   where     name is not null</code></p> </li> <li> <p>Modelos de Agrega\u00e7\u00e3o de Dados:   <code>sql   -- models/aggregated_data.sql   select     category,     sum(price) as total_price   from     {{ ref('cleaned_data') }}   group by     category</code></p> </li> </ul>"},{"location":"reference/models/#vantagens-dos-models-no-dbt-core","title":"Vantagens dos Models no dbt-core","text":"<ul> <li>Modularidade: Models permitem que voc\u00ea divida transforma\u00e7\u00f5es complexas em partes menores e mais gerenci\u00e1veis.</li> <li>Reutiliza\u00e7\u00e3o: Models podem ser reutilizados em diferentes partes do seu projeto, evitando duplica\u00e7\u00e3o de c\u00f3digo.</li> <li>Clareza: A estrutura clara e a utiliza\u00e7\u00e3o de refer\u00eancias (<code>ref</code>) tornam o pipeline de dados f\u00e1cil de entender e manter.</li> <li>Desempenho: A materializa\u00e7\u00e3o como tabelas pode melhorar o desempenho de consultas complexas, enquanto views garantem dados sempre atualizados.</li> </ul>"},{"location":"reference/models/#executando-models","title":"Executando Models","text":"<p>Para executar os models e aplicar as transforma\u00e7\u00f5es de dados, voc\u00ea utiliza o comando <code>dbt run</code>. Este comando compila os models e executa as consultas SQL no seu data warehouse, criando ou atualizando as tabelas e views conforme definido.</p> <pre><code>dbt run\n</code></pre> <p>Os models no dbt-core s\u00e3o fundamentais para construir pipelines de dados robustos e eficientes. Eles oferecem uma maneira estruturada e modular de transformar dados brutos em dados prontos para an\u00e1lise, aproveitando ao m\u00e1ximo as capacidades do seu data warehouse.</p>"},{"location":"reference/projeto/","title":"Projeto","text":""},{"location":"reference/projeto/#estrutura-da-pasta-referencia","title":"Estrutura da Pasta Refer\u00eancia","text":"<p>A estrutura da pasta <code>reference</code> deve ser organizada dentro do diret\u00f3rio <code>docs</code> do seu projeto. Aqui est\u00e1 como deve ser a estrutura de diret\u00f3rios:</p> <pre><code>my_mkdocs_project/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 guides/\n\u2502   \u2502   \u251c\u2500\u2500 welcome.md\n\u2502   \u2502   \u251c\u2500\u2500 initial_setup.md\n\u2502   \u2502   \u2514\u2500\u2500 first_steps.md\n\u2502   \u251c\u2500\u2500 reference/\n\u2502   \u2502   \u251c\u2500\u2500 dbt_core.md\n\u2502   \u2502   \u2514\u2500\u2500 postgresql.md\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u2502   \u251c\u2500\u2500 logo.png\n\u2502   \u2502   \u2514\u2500\u2500 favicon.ico\n\u2502   \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"reference/projeto/#conteudo-da-pagina-dbt_coremd","title":"Conte\u00fado da P\u00e1gina <code>dbt_core.md</code>","text":"<p>Crie um arquivo chamado <code>dbt_core.md</code> dentro da pasta <code>reference</code> e adicione o seguinte conte\u00fado:</p> <pre><code># dbt-core\n\nO dbt-core (data build tool) \u00e9 uma ferramenta poderosa para transformar dados dentro do seu data warehouse. Ele permite que analistas de dados e engenheiros de dados escrevam transforma\u00e7\u00f5es de dados usando SQL simples, enquanto o dbt se encarrega de transformar essas instru\u00e7\u00f5es em tabelas e views no data warehouse.\n\n## Principais Benef\u00edcios\n\n1. **Facilidade de Uso**: Com dbt-core, voc\u00ea pode transformar dados escrevendo apenas instru\u00e7\u00f5es `SELECT`. N\u00e3o \u00e9 necess\u00e1rio aprender uma nova linguagem de programa\u00e7\u00e3o; voc\u00ea pode usar SQL, que j\u00e1 conhece.\n\n2. **Documenta\u00e7\u00e3o e Testes**: dbt-core facilita a documenta\u00e7\u00e3o das transforma\u00e7\u00f5es de dados e permite adicionar testes automatizados para garantir a qualidade dos dados. Isso ajuda a manter um pipeline de dados confi\u00e1vel e bem documentado.\n\n3. **Gest\u00e3o de Depend\u00eancias**: O dbt-core torna f\u00e1cil gerenciar depend\u00eancias entre modelos de dados. Usando a fun\u00e7\u00e3o `{{ ref('model_name') }}`, voc\u00ea pode criar relacionamentos claros entre diferentes modelos, assegurando que as transforma\u00e7\u00f5es sejam executadas na ordem correta.\n\n## Como Usamos dbt-core neste Projeto\n\nNeste projeto, usamos o dbt-core para transformar e agregar dados do banco de dados de demonstra\u00e7\u00e3o Northwind. Abaixo est\u00e3o alguns exemplos de como configuramos e utilizamos dbt-core:\n\n### Exemplo de Modelo B\u00e1sico\n\n```sql\n-- models/orders.sql\nselect * from raw_orders_table\n</code></pre>"},{"location":"reference/projeto/#exemplo-de-modelo-com-dependencia","title":"Exemplo de Modelo com Depend\u00eancia","text":"<pre><code>-- models/total_revenues_1997.sql\nwith ord as (\n    select order_id \n    from {{ ref('orders') }}\n    where extract(year from order_date) = 1997\n)\nselect \n    sum(order_details.unit_price * order_details.quantity * (1.0 - order_details.discount)) as total_revenues_1997\nfrom \n    {{ ref('order_details') }} \ninner join \n    ord \non \n    ord.order_id = order_details.order_id\n</code></pre>"},{"location":"reference/projeto/#configuracao-do-dbt","title":"Configura\u00e7\u00e3o do dbt","text":"<p>A configura\u00e7\u00e3o do dbt \u00e9 feita no arquivo <code>dbt_project.yml</code>, onde definimos os detalhes do projeto, como as conex\u00f5es com o banco de dados e os caminhos dos modelos:</p> <pre><code># dbt_project.yml\n\nname: 'northwind_project'\nversion: '1.0.0'\nconfig-version: 2\n\n# Conex\u00e3o com o banco de dados\nprofile: 'northwind_project'\n\n# Configura\u00e7\u00f5es dos modelos\nmodels:\n  northwind:\n    orders:\n      materialized: table\n    order_details:\n      materialized: table\n    total_revenues_1997:\n      materialized: view\n</code></pre>"},{"location":"reference/projeto/#executando-o-dbt","title":"Executando o dbt","text":"<p>Para compilar e executar os modelos, usamos o comando <code>dbt run</code>:</p> <pre><code>dbt run\n</code></pre> <p>Isso cria as tabelas e views definidas no data warehouse, transformando os dados brutos em dados prontos para an\u00e1lise.</p>"},{"location":"reference/projeto/#recursos-adicionais","title":"Recursos Adicionais","text":"<ul> <li>Documenta\u00e7\u00e3o Oficial do dbt-core</li> <li>Reposit\u00f3rio do dbt no GitHub</li> </ul> <p>Esperamos que este guia ajude voc\u00ea a come\u00e7ar a usar dbt-core em seus projetos de data warehouse!</p>"},{"location":"reference/supported_data_plarforms/","title":"Plataformas suportadas","text":""},{"location":"reference/supported_data_plarforms/#plataformas-de-dados-suportadas","title":"Plataformas de Dados Suportadas","text":"<p>O dbt se conecta e executa SQL em seu banco de dados, data warehouse, data lake ou mecanismo de consulta. Estas plataformas que falam SQL s\u00e3o coletivamente chamadas de plataformas de dados. O dbt se conecta a estas plataformas usando um plugin de adaptador dedicado para cada uma. Os plugins s\u00e3o constru\u00eddos como m\u00f3dulos Python que o dbt Core descobre se estiverem instalados no seu sistema. Consulte o guia de Constru\u00e7\u00e3o, teste, documenta\u00e7\u00e3o e promo\u00e7\u00e3o de adaptadores para mais detalhes.</p> <p>Voc\u00ea pode conectar-se a adaptadores e plataformas de dados diretamente no dbt Cloud ou instal\u00e1-los manualmente usando o dbt Core.</p>"},{"location":"reference/supported_data_plarforms/#tipos-de-adaptadores","title":"Tipos de Adaptadores","text":"<p>Existem dois tipos de adaptadores dispon\u00edveis:</p> <ul> <li>Confi\u00e1veis: Adaptadores confi\u00e1veis participam do Programa de Adaptadores Confi\u00e1veis e atendem aos requisitos desse programa. Adaptadores suportados no dbt Cloud passam por um processo rigoroso que abrange requisitos de desenvolvimento, documenta\u00e7\u00e3o, experi\u00eancia do usu\u00e1rio e manuten\u00e7\u00e3o.</li> <li>Comunidade: Adaptadores comunit\u00e1rios s\u00e3o open-source e mantidos por membros da comunidade. Eles n\u00e3o fazem parte do Programa de Adaptadores Confi\u00e1veis e podem ter inconsist\u00eancias de uso.</li> </ul>"},{"location":"reference/supported_data_plarforms/#como-conectar-se-a-adaptadores","title":"Como Conectar-se a Adaptadores","text":"<p>Adaptadores s\u00e3o componentes essenciais do dbt. Eles permitem que o dbt se conecte com v\u00e1rias plataformas de dados suportadas, padronizando a estrutura dos projetos de an\u00e1lise. Isso facilita a transfer\u00eancia de habilidades entre diferentes plataformas de dados.</p>"},{"location":"reference/supported_data_plarforms/#configuracao-no-dbt-cloud","title":"Configura\u00e7\u00e3o no dbt Cloud","text":"<p>Explore a maneira mais r\u00e1pida e confi\u00e1vel de implantar o dbt usando o dbt Cloud, uma arquitetura hospedada que executa o dbt Core em toda a sua organiza\u00e7\u00e3o. O dbt Cloud permite conectar-se facilmente a uma variedade de provedores de plataformas de dados confi\u00e1veis diretamente na interface do dbt Cloud.</p>"},{"location":"reference/supported_data_plarforms/#instalacao-com-o-dbt-core","title":"Instala\u00e7\u00e3o com o dbt Core","text":"<p>Instale o dbt Core localmente usando a linha de comando. O dbt se comunica com v\u00e1rias plataformas de dados usando um plugin de adaptador dedicado para cada uma. Quando voc\u00ea instala o dbt Core, tamb\u00e9m precisa instalar o adaptador espec\u00edfico para seu banco de dados, conectar-se ao dbt Core e configurar um arquivo <code>profiles.yml</code>.</p> <p>Voc\u00ea pode instalar todos os adaptadores do PyPI usando o comando <code>python -m pip install adapter-name</code>. Por exemplo, para instalar o adaptador para Snowflake, use o comando <code>python -m pip install dbt-snowflake</code>. A instala\u00e7\u00e3o incluir\u00e1 o dbt-core e outras depend\u00eancias necess\u00e1rias. Leia mais sobre a instala\u00e7\u00e3o do dbt.</p>"},{"location":"reference/supported_data_plarforms/#adaptadores-confiaveis","title":"Adaptadores Confi\u00e1veis","text":"<p>Adaptadores confi\u00e1veis fazem parte do Programa de Adaptadores Confi\u00e1veis, sendo mantidos pela dbt Labs, parceiros e membros da comunidade. Adaptadores confi\u00e1veis no dbt Cloud passam por um processo rigoroso adicional que cobre requisitos de desenvolvimento, documenta\u00e7\u00e3o, experi\u00eancia do usu\u00e1rio e manuten\u00e7\u00e3o. Recomendamos fortemente o uso deles em ambientes de produ\u00e7\u00e3o.</p>"},{"location":"reference/supported_data_plarforms/#plataformas-de-dados-suportadas_1","title":"Plataformas de Dados Suportadas","text":"Plataforma de Dados Configura\u00e7\u00e3o no dbt Cloud Instala\u00e7\u00e3o com o dbt Core AlloyDB \u2714 \u2714 Apache Spark \u2714 \u2714 Athena \u2714 Azure Synapse \u2714 \u2714 BigQuery \u2714 \u2714 Databricks \u2714 \u2714 Dremio \u2714 Glue \u2714 Materialize \u2714 Microsoft Fabric \u2714 \u2714 Oracle Autonomous Database \u2714 Postgres \u2714 \u2714 Redshift \u2714 \u2714 Snowflake \u2714 \u2714 Starburst/Trino \u2714 \u2714 Teradata \u2714"},{"location":"reference/supported_data_plarforms/#adaptadores-da-comunidade","title":"Adaptadores da Comunidade","text":"<p>Adaptadores comunit\u00e1rios s\u00e3o plugins de adaptadores contribu\u00eddos e mantidos por membros da comunidade. Incentivamos e valorizamos as contribui\u00e7\u00f5es de plugins de adaptadores da comunidade dbt. Lembre-se de que esses mantenedores comunit\u00e1rios s\u00e3o volunt\u00e1rios corajosos que doam seu tempo e esfor\u00e7o - seja gentil, compreensivo e ajude quando puder!</p> Plataformas de Dados Plataformas de Dados Plataformas de Dados Clickhouse Databend Cloud Doris &amp; SelectDB DuckDB Exasol Analytics Extrica fal - Python models Firebolt Greenplum Hive IBM DB2 Impala Infer iomete MindsDB MySQL RisingWave Rockset SingleStore SQL Server &amp; Azure SQL SQLite Starrocks TiDB TimescaleDB Upsolver Vertica Yellowbrick"},{"location":"reference/supported_data_plarforms/#contribua-para-adaptadores","title":"Contribua para Adaptadores","text":"<p>A comunidade dbt existe para permitir que os praticantes de an\u00e1lise compartilhem seu conhecimento, ajudem outros e, coletivamente, impulsionem a disciplina de engenharia de dados. H\u00e1 oportunidades para todos contribu\u00edrem, seja voc\u00ea</p> <p>um iniciante em engenharia de dados ou um profissional experiente.</p>"},{"location":"reference/supported_data_plarforms/#contribuir-para-um-adaptador-existente","title":"Contribuir para um Adaptador Existente","text":"<p>Os plugins suportados pela comunidade est\u00e3o em constante desenvolvimento e qualquer pessoa pode contribuir testando e escrevendo c\u00f3digo. Se voc\u00ea estiver interessado em contribuir:</p> <ol> <li>Junte-se ao canal dedicado, #adapter-ecosystem, no Slack do dbt, e ao canal espec\u00edfico para o banco de dados do seu adaptador. Consulte o link do canal Slack nas p\u00e1ginas da plataforma dbt Core.</li> <li>Verifique as quest\u00f5es abertas no reposit\u00f3rio do plugin. Use o link relevante do reposit\u00f3rio GitHub nas p\u00e1ginas da plataforma dbt Core.</li> </ol>"},{"location":"reference/supported_data_plarforms/#criar-um-novo-adaptador","title":"Criar um Novo Adaptador","text":"<p>Se voc\u00ea notar algo ausente nas listas acima e estiver interessado em desenvolver uma integra\u00e7\u00e3o, leia mais sobre adaptadores e como eles s\u00e3o desenvolvidos no guia de Constru\u00e7\u00e3o, teste, documenta\u00e7\u00e3o e promo\u00e7\u00e3o de adaptadores.</p> <p>Se voc\u00ea tiver um novo adaptador, adicione-o a esta lista usando um pull request! Voc\u00ea pode consultar o guia de Constru\u00e7\u00e3o, teste, documenta\u00e7\u00e3o e promo\u00e7\u00e3o de adaptadores para mais informa\u00e7\u00f5es sobre como documentar seu adaptador.</p>"}]}